# Set the desired step size for the age intervals
age_interval_step = st.sidebar.slider('Age Interval Step', min_value=0, max_value=20, value=10)

# Generate age intervals based on the step size, starting from zero
age_min = 0
age_max = data['age'].max()
age_intervals = list(range(age_min, age_max + 1, age_interval_step))

# Calculate age count by site and gender
age_count = filtered_data.groupby(['site', 'gender'])['age'].apply(lambda x: np.histogram(x, bins=age_intervals)[0]).unstack(fill_value=0)

# Create the stacked bar chart for age frequency
fig_bar_ages = go.Figure()

# Assign the colors for sites and genders
site_colors = ['rgb(255, 165, 0)', 'rgb(165, 42, 42)']
gender_colors = {'Male': 'rgb(0, 128, 0)', 'Female': 'rgb(0, 0, 255)'}
bar_colors = ['rgb(255, 0, 0)', 'rgb(0, 255, 0)', 'rgb(0, 0, 255)', 'rgb(255, 255, 0)']

# Add the age values as stacked bars on the chart
for site in age_count.index:
    site_data = age_count.loc[site]
    x_values = [f"{interval}-{interval + age_interval_step - 1}" for interval in age_intervals]
    for i, gender in enumerate(site_data.index):
        if isinstance(site_data[gender], int):
            y_values = [site_data[gender]] * len(age_intervals)
        else:
            y_values = site_data[gender].tolist()
        fig_bar_ages.add_trace(go.Bar(
            x=x_values,
            y=y_values,
            name=f"{site} - {gender}",
            marker_color=gender_colors[gender],  # Use gender as a key to access color
            legendgroup=f"{site} - {gender}",
            offsetgroup=f"{site} - {gender}"
        ))

# Update the marker colors for each bar in the stacked bar chart
for i, trace in enumerate(fig_bar_ages.data):
    trace.marker.color = bar_colors[i % len(bar_colors)]

fig_bar_ages.update_layout(
    title="Age Frequency by Site and Gender",
    xaxis_title="Age Group",
    yaxis_title="Frequency",
    barmode='stack'  # Change the barmode to 'stack' for stacked bars
)